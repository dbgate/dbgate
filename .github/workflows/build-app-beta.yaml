# --------------------------------------------------------------------------------------------
# This file is generated. Do not edit manually
# --------------------------------------------------------------------------------------------
name: Electron app BETA
'on':
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+

permissions:
  id-token: write
  contents: write
  
jobs:
  build:
    runs-on: ${{ matrix.os }}
    environment: dbgate-app
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
    steps:
      - name: Install python 3.11 (MacOS)
        if: matrix.os == 'macos-14'
        run: |
          brew install python@3.11
          echo "PYTHON=/opt/homebrew/bin/python3.11" >> $GITHUB_ENV
      - name: Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Use Node.js 22.x
        uses: actions/setup-node@v1
        with:
          node-version: 22.x
      - name: adjustPackageJson
        run: |

          node adjustPackageJson --community
      - name: setUpdaterChannel beta
        run: |

          node setUpdaterChannel beta
      - name: yarn set timeout
        run: |

          yarn config set network-timeout 100000
      - name: yarn install
        run: |

          yarn install
      - name: setCurrentVersion
        run: |

          yarn setCurrentVersion
      - name: fillPackagedPlugins
        run: |

          yarn fillPackagedPlugins
      - name: Install Snapcraft
        if: matrix.os == 'ubuntu-22.04'
        uses: samuelmeuli/action-snapcraft@v1
      - name: Publish
        run: |

          yarn run build:app
        # env:
        #   GH_TOKEN: ${{ secrets.GH_TOKEN }}
          # WIN_CSC_LINK: ${{ secrets.WINCERT_2025 }}
          # WIN_CSC_KEY_PASSWORD: ${{ secrets.WINCERT_2025_PASSWORD }}

          # CSC_LINK: ${{ secrets.APPLECERT_CERTIFICATE }}
          # CSC_KEY_PASSWORD: ${{ secrets.APPLECERT_PASSWORD }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          # APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          # SNAPCRAFT_STORE_CREDENTIALS: ${{secrets.SNAPCRAFT_LOGIN}}
          # APPLE_APP_SPECIFIC_PASSWORD: ${{secrets.APPLE_APP_SPECIFIC_PASSWORD}}

      - name: Check OIDC availability
        if: matrix.os == 'windows-2022'
        run: |
          echo "OIDC URL: $env:ACTIONS_ID_TOKEN_REQUEST_URL"
          echo "OIDC TOKEN: ${{ steps.none.outputs.nothing || '' }}"
          echo "Client ID: ${{ secrets.AZURE_TC_CLIENT_ID }}"
          echo "Tenant ID: ${{ secrets.AZURE_TC_TENANT_ID }}"
        shell: pwsh

      - name: Azure login (OIDC)
        uses: azure/login@v2
        if: matrix.os == 'windows-2022'
        with:
          client-id: ${{ secrets.AZURE_TC_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TC_TENANT_ID }}
          allow-no-subscriptions: true

      - name: Sign Windows artifacts with Azure Trusted Signing
        uses: azure/trusted-signing-action@v0
        if: matrix.os == 'windows-2022'
        with:
          # azure-tenant-id: ${{ secrets.AZURE_TC_TENANT_ID }}
          # azure-client-id: ${{ secrets.AZURE_TC_CLIENT_ID }}
          # azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

          endpoint: https://wus3.codesigning.azure.net/
          trusted-signing-account-name: DbGate
          certificate-profile-name: DbGate-Release

          files-folder: app/dist
          files-folder-filter: exe

          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      # - name: Repackage Windows
      #   if: matrix.os == 'windows-2022'
      #   run: |
      #     yarn run repackage:app

      - name: Fix YML hashes
        run: |
          yarn run fixYmlHashes

      - name: Copy artifacts
        run: |
          mkdir artifacts          

          cp app/dist/*.deb artifacts/dbgate-beta.deb || true
          cp app/dist/*x86*.AppImage artifacts/dbgate-beta.AppImage || true
          cp app/dist/*arm64*.AppImage artifacts/dbgate-beta-arm64.AppImage || true
          cp app/dist/*armv7l*.AppImage artifacts/dbgate-beta-armv7l.AppImage || true
          cp app/dist/*win*.exe artifacts/dbgate-beta.exe || true
          cp app/dist/*win_x64.zip artifacts/dbgate-windows-beta.zip || true
          cp app/dist/*win_arm64.zip artifacts/dbgate-windows-beta-arm64.zip || true
          cp app/dist/*win_arm64.exe artifacts/dbgate-windows-beta-arm64.exe || true
          cp app/dist/*-mac_universal.dmg artifacts/dbgate-beta.dmg || true
          cp app/dist/*-mac_x64.dmg artifacts/dbgate-beta-x64.dmg || true
          cp app/dist/*-mac_arm64.dmg artifacts/dbgate-beta-arm64.dmg || true
          mv app/dist/*.snap artifacts/dbgate-beta.snap || true

          mv app/dist/*.exe artifacts/ || true
          mv app/dist/*.zip artifacts/ || true
          mv app/dist/*.tar.gz artifacts/ || true
          mv app/dist/*.AppImage artifacts/ || true
          mv app/dist/*.deb artifacts/ || true
          mv app/dist/*.snap artifacts/ || true
          mv app/dist/*.dmg artifacts/ || true

          mv app/dist/*.yml artifacts/ || true
          rm artifacts/builder-debug.yml

      # - name: Verify Windows signature
      #   if: matrix.os == 'windows-2022'
      #   run: |
      #     "C:\Program Files (x86)\Windows Kits\10\App Certification Kit\signtool.exe" verify /pa /v "artifacts/dbgate-beta.exe"
      #     Get-AuthenticodeSignature "artifacts/dbgate-beta.exe" | Format-List
      #   shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: artifacts
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: artifacts/**
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Print content of notarization-error.log
        if: failure() && matrix.os == 'macos-14'
        run: |

          find . -type f -name "notarization-error.log" -exec echo "=== Start of {} ===" \; -exec cat {} \; -exec echo "=== End of {} ===" \;
