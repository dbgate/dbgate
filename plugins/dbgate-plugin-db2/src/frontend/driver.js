const { driverBase } = global.DBGATE_PACKAGES['dbgate-tools'];

const db2SplitterOptions = {
  delimiter: ';',
  ignoreComments: true,
  preventSingleLineSplit: true
};

/** @type {import('dbgate-types').SqlDialect} */
const dialect = {
  rangeSelect: true,
  limitSelect: true,
  ilike: false,
  stringEscapeChar: "'",
  fallbackDataType: 'varchar(250)',
  anonymousPrimaryKey: false,
  enableConstraintsPerTable: true,
  timeoutSeconds: 30, // Add global timeout for all operations
  // Enhanced column properties for better column display
  columnProperties: {
    setColumnListReferences: true,
    autoGeneratedPrimaryKey: true,
    columnListDisplayColumn: 'columnName',
    acceptsDefaultExpressions: true,
    generateCreateTable: true,
    filterCellValue: true,
    isNullable: true,
    foreignKey: true,
    primaryKey: true
  },
  quoteIdentifier(s) {
    return '"' + s + '"';
  },
  supportedDrivers: ['db2'],
  defaultPort: 50000,
  supportedObjectTypes: ['tables', 'views', 'procedures', 'functions', 'schemas'],
  // Schema handling configuration
  schemaName: 'schemaName', // Field name for schema in backend data
  multipleSchema: true,
  objectTypeBySchema: true,
  useSchemaInObjectNames: true,
  defaultSchemaName: null, // Using null to let the backend determine the default schema
  schemaField: 'schemaName', // Added consistent schema field for UI
};

function adaptTableInfo(table) {
  const baseAdapted = driverBase.adaptTableInfo(table);
  if (!baseAdapted.primaryKey && !baseAdapted.sortingKey) {
    // Removed unused hasIdColumn variable
    return {
      ...baseAdapted,
      primaryKey: {
        columns: [
          {
            columnName: 'id',
          },
        ],
      },
      columns: [
        // Always add 'id' column if not present
        ...(baseAdapted.columns.some((x) => x.columnName == 'id')
          ? []
          : [
              {
                columnName: 'id',
                dataType: 'uuid',
              },
            ]),
        ...baseAdapted.columns,
      ],
    };
  }
  return baseAdapted;
}  const driver = {
  ...driverBase,
  engine: 'db2@dbgate-plugin-db2',
  title: 'IBM DB2',
  defaultPort: 50000, // Corrected DB2 default port (should be 50000, not 25000)
  defaultDatabase: '',
  dialect: 'db2',
  showConnectionTab: field => field == 'sshTunnel',
  showConnectionField: (field, values) => {
    if (field == 'useDatabaseUrl') return true;
    if (values.useDatabaseUrl) {
      return ['databaseUrl', 'isReadOnly'].includes(field);
    }
    return ['server', 'port', 'user', 'password', 'defaultDatabase', 'singleDatabase', 'isReadOnly'].includes(field);
  },
  connectionFields: [    { field: 'server', type: 'string', label: 'Server', required: true },
    { field: 'port', type: 'number', label: 'Port', required: true, defaultValue: 25000 },
    { field: 'user', type: 'string', label: 'User', required: true },
    { field: 'password', type: 'password', label: 'Password', required: true },
    { field: 'database', type: 'string', label: 'Database', required: true },
  ],
  icon: 'db2',  supports: {
    schemas: true,
    schemaFilter: true,
    schemaSelect: true,
    multipleSchemas: true,
    schemaObjectTypesFilter: true,
    schemaStructureDisplay: true, // Enable displaying schema structure
    tableStructureGet: true, // Enable table structure retrieval
    columnProperties: true, // Enable column properties
    tables: true,
    views: true,
    triggers: true,
    procedures: true,
    functions: true,
    users: true,
    roles: true,
    indexes: true,
    foreignKeys: true,
    primaryKeys: true,
    uniqueKeys: true,
    checkConstraints: true,
    defaultValues: true,
    autoIncrement: true,
    comments: true,
    partitions: true,
    materializedViews: true,
    sequences: true,
    types: true,
    domains: true,
    collations: true,
    characterSets: true,
    extensions: true,
    privileges: true,
    grants: true
  },
  id: 'db2',
  name: 'DB2',
  displayName: 'IBM DB2',
  description: 'IBM DB2 Database',
  category: 'database',
  isBuiltin: true,
  sortOrder: -1,
  databaseUrlPlaceholder: 'e.g. DATABASE=mydatabase;HOSTNAME=localhost;PORT=50000;PROTOCOL=TCPIP;UID=user;PWD=password;',
  supportsTransactions: true,
  readOnlySessions: true,
  editorMode: 'sql',
  getQuerySplitterOptions: (usage) =>
    usage == 'editor'
      ? { ...db2SplitterOptions, ignoreComments: true, preventSingleLineSplit: true }
      : usage == 'import'
      ? {
          ...db2SplitterOptions,
        }      : db2SplitterOptions,
  adaptTableInfo,
  dialect
};

module.exports = driver;
